# basic namespaces
prefix owl: <http://www.w3.org/2002/07/owl#> 
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> 
prefix xsd: <http://www.w3.org/2001/XMLSchema#> 

# EuroVoc and SKOS-AP/SRC-AP specific namespaces
prefix vb: <http://art.uniroma2.it/ontologies/vocbench#> 
prefix eurovoc: <http://eurovoc.europa.eu/>
prefix euvoc: <http://publications.europa.eu/ontology/euvoc#> 

prefix label: <http://publications.europa.eu/resource/authority/label-type/> 
prefix status: <http://publications.europa.eu/resource/authority/concept-status/> 
prefix align: <http://knowledgeweb.semanticweb.org/heterogeneity/alignment#>

# some popular namespaces
prefix skos: <http://www.w3.org/2004/02/skos/core#> 
prefix skosxl: <http://www.w3.org/2008/05/skos-xl#> 
prefix dct: <http://purl.org/dc/terms/> 
prefix dc: <http://purl.org/dc/elements/1.1/> 
prefix prov: <http://www.w3.org/ns/prov#> 

prefix lemon: <http://lemon-model.net/lemon#> 
prefix lexinfo: <http://www.lexinfo.net/ontology/2.0/lexinfo#> 
prefix lexvo: <http://lexvo.org/ontology#> 

# legacy namespaces
prefix oldevo: <http://eurovoc.europa.eu/schema#> 
prefix thes: <http://purl.org/iso25964/skos-thes#>

# versioning namespaces 
PREFIX dsv: <http://purl.org/iso25964/DataSet/Versioning#>
PREFIX sd: <http://www.w3.org/ns/sparql-service-description#>
PREFIX sh: <http://purl.org/skos-history/>
PREFIX xhv: <http://www.w3.org/1999/xhtml/vocab#>

#
# Show all deleted instance/property/object property statements in the current version
#
SELECT DISTINCT ?instance (str(?prefLabel) as ?instanceLabel) ?property ?objProperty (?value AS ?deletedValue)
WHERE {
  GRAPH ?versionHistoryGraph {
    # parameters
    VALUES ( ?versionHistoryGraph ?oldVersion ?newVersion ?class ?property ?objProperty ?language) {
      ( undef 
        undef 
        undef 
        skos:Concept  
        skosxl:hiddenLabel 
        dct:type
        "en"
      )
    }
    # get the current and the previous version as default versions
    ?versionset dsv:currentVersionRecord/xhv:prev/dc:identifier ?previousVersion .
    ?versionset dsv:currentVersionRecord/dc:identifier ?latestVersion .
    # select the versions to actually use
    BIND(coalesce(?oldVersion, ?previousVersion) AS ?oldVersionSelected)
    BIND(coalesce(?newVersion, ?latestVersion) AS ?newVersionSelected)
    # get the delta and via that the relevant graphs
    ?delta a sh:SchemeDelta ;
      sh:deltaFrom/dc:identifier ?oldVersionSelected ;
      sh:deltaTo/dc:identifier ?newVersionSelected ;
      sh:deltaFrom/sh:usingNamedGraph/sd:name ?oldVersionGraph ;
      sh:deltaTo/sh:usingNamedGraph/sd:name ?newVersionGraph ;
      dct:hasPart ?insertions ;
      dct:hasPart ?deletions .
    ?deletions a sh:SchemeDeltaDeletions ;
      sh:usingNamedGraph/sd:name ?deletionsGraph .
    ?insertions a sh:SchemeDeltaInsertions ;
      sh:usingNamedGraph/sd:name ?insertionsGraph .
  }
  # get all deleted labels
  GRAPH ?deletionsGraph {
    [] ?property ?value .
  }
  # ... which were not attached to some (other) concept now
  FILTER NOT EXISTS {
    GRAPH ?insertionsGraph {
      [] ?property ?object .
      ?object ?objProperty ?value .
    }
  }  
  GRAPH ?oldVersionGraph {
    # get instances 
    ?instance a ?class .
    ?instance ?property ?object .
    ?object ?objProperty ?value .
    optional {
      ?instance skos:prefLabel ?prefLabel .
      
      #restrict prefLabel to a certain language
      FILTER (lang(?prefLabel) = "en")
      
    }
  }
}
ORDER BY ?instance ?value